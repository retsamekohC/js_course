const assert = require('assert')
const { run, phoneBook } = require('../homework2/try')

describe('Syntax error', () => {
    it('ожидает ввода имени', () => {
        assert.throws(() => run('Создай контакт Григорий Григорьев'), {
            name: 'Error',
            message: 'SyntaxError: Unexpected token at 1:34',
        })
    })
    // it('отсутствует запрос', () => {
    //     assert.throws(() => run('Покажи имя для контактов, где есть;'), {
    //         name: 'Error',
    //         message: 'SyntaxError: Unexpected token at 1:35',
    //     })
    // })
    // it('отсутствует запрос удали', () => {
    //     assert.throws(() => run('Удали контакты, где есть;'), {
    //         name: 'Error',
    //         message: 'SyntaxError: Unexpected token at 1:25',
    //     })
    // })
    it('ожидает ввода имени 2 lines', () => {
        assert.throws(
            () => run('Создай контакт Григорий Григорьев;' + 'Создай контакт Григорий Григорьев'),
            {
                name: 'Error',
                message: 'SyntaxError: Unexpected token at 2:34',
            }
        )
    })
    it('неверный номер', () => {
        assert.throws(
            () =>
                run(
                    'Создай контакт Григорий Григорьев;' +
                        'Добавь телефон  для контакта Григорий Григорьев;'
                ),
            {
                name: 'Error',
                message: 'SyntaxError: Unexpected token at 2:16',
            }
        )
        assert.throws(
            () =>
                run(
                    'Создай контакт Григорий Григорьев;' +
                        'Добавь телефон 1 для контакта Григорий Григорьев;'
                ),
            {
                name: 'Error',
                message: 'SyntaxError: Unexpected token at 2:16',
            }
        )
        assert.throws(
            () =>
                run(
                    'Создай контакт Григорий Григорьев;' +
                        'Добавь телефон 123456789 для контакта Григорий Григорьев;'
                ),
            {
                name: 'Error',
                message: 'SyntaxError: Unexpected token at 2:16',
            }
        )
        assert.throws(
            () =>
                run(
                    'Создай контакт Григорий Григорьев;' +
                        'Добавь телефон 12345678912 для контакта Григорий Григорьев;'
                ),
            {
                name: 'Error',
                message: 'SyntaxError: Unexpected token at 2:16',
            }
        )
        assert.throws(
            () =>
                run(
                    'Создай контакт Григорий Григорьев;' +
                        'Добавь телефон +1234567891 для контакта Григорий Григорьев;'
                ),
            {
                name: 'Error',
                message: 'SyntaxError: Unexpected token at 2:16',
            }
        )
    })
})

describe('Покажи', () => {
    it('syntaxError', () => {
        assert.throws(() => run('покажи имя для контактов, где есть Гр'), {
            name: 'Error',
            message: 'SyntaxError: Unexpected token at 1:1',
        })
        assert.throws(() => run('Покжи имя для контактов, где есть Гр;'), {
            name: 'Error',
            message: 'SyntaxError: Unexpected token at 1:1',
        })
        assert.throws(() => run('Покажи имя для контактов, где есть Гр'), {
            name: 'Error',
            message: 'SyntaxError: Unexpected token at 1:38',
        })
        assert.throws(() => run('Покажи  имя для контактов, где есть Гр;'), {
            name: 'Error',
            message: 'SyntaxError: Unexpected token at 1:8',
        })
        assert.throws(
            () =>
                run('Покажи имя для контактов, где есть Гр;Покажи имя для контактов, где есть Гр'),
            {
                name: 'Error',
                message: 'SyntaxError: Unexpected token at 2:38',
            }
        )
    })
    it('пустая книга', () => {
        phoneBook.clear()
        const result = run('Покажи имя для контактов, где есть ий;')
        assert.deepEqual(result, [])
    })
    it('пустая книга но два запроса', () => {
        const result = run(
            'Покажи имя для контактов, где есть ий;Покажи имя для контактов, где есть Гр;'
        )
        assert.deepEqual(result, [])
    })
    it('несколько запросов + покажи', () => {
        const result = run(
            'Создай контакт Григорий;' +
                'Создай контакт Василий;' +
                'Создай контакт Иннокентий;' +
                'Покажи имя и имя и имя для контактов, где есть ий;'
        )
        assert.deepEqual(result, [
            'Григорий;Григорий;Григорий',
            'Василий;Василий;Василий',
            'Иннокентий;Иннокентий;Иннокентий',
        ])
    })
    it('несколько покажи', () => {
        phoneBook.clear()
        const result = run(
            'Создай контакт Григорий;' +
                'Покажи имя для контактов, где есть ий;' +
                'Покажи имя для контактов, где есть ий;'
        )
        assert.deepEqual(result, ['Григорий', 'Григорий'])
    })
    it('с пробелом', () => {
        const result = run(
            'Создай контакт Григорий Иванов;' +
                'Создай контакт Григорий Петров;' +
                'Покажи имя для контактов, где есть Григорий Иванов;' +
                'Покажи имя для контактов, где есть ов;'
        )
        assert.deepEqual(result, ['Григорий Иванов', 'Григорий Иванов', 'Григорий Петров'])
    })
    it('ничего не возвращает', () => {
        const result = run(
            'Создай контакт Григорий Иванов;' +
                'Создай контакт Григорий Петров;' +
                'Покажи имя для контактов, где есть Григорий Иванов;' +
                'Покажи почты для контактов, где есть Григорий Иванов;'
        )
        assert.deepEqual(result, ['Григорий Иванов', ''])
        phoneBook.clear();
        const result2 = run(
            'Покажи имя для контактов, где есть Григорий Иванов;' +
                'Покажи имя для контактов, где есть Григорий Иванов;' +
                'Покажи имя для контактов, где есть ;' +
                'Покажи имя для контактов, где есть Григорий Иванов;' +
                'Покажи имя для контактов, где есть ;' +
                'Покажи имя для контактов, где есть Григорий Иванов;'
        )
        assert.deepEqual(result2, [])
    })
    it('несколько запросов', () => {
        const result = run(
            'Создай контакт Григорий Иванов;' +
                'Создай контакт Григорий Петров;' +
                'Покажи имя для контактов, где есть ов;' +
                'Создай контакт Сергей Петров;' +
                'Покажи имя для контактов, где есть ов;' +
                'Покажи имя и телефоны и почты для контактов, где есть ов;' +
                'Добавь телефон 5556667787 для контакта Григорий Иванов;' +
                'Покажи имя и телефоны для контактов, где есть ов;' +
                'Покажи почты для контактов, где есть ов;'
        )
        assert.deepEqual(result, [
                'Григорий Иванов',
                'Григорий Петров',
                'Григорий Иванов',
                'Григорий Петров',
                'Сергей Петров',
                'Григорий Иванов;;',
                'Григорий Петров;;',
                'Сергей Петров;;',
                'Григорий Иванов;+7 (555) 666-77-87',
                'Григорий Петров;',
                'Сергей Петров;',
                '',
                '',
                ''
            ]
        )
        phoneBook.clear()
        const result2 = run(
            'Создай контакт Григорий Иванов;' +
                'Покажи имя для контактов, где есть ов;' +
                'Покажи имя для контактов, где есть арк;' +
                'Покажи имя для контактов, где есть ов;'
        )
        assert.deepEqual(result2, ['Григорий Иванов', 'Григорий Иванов'])
    })
    it('по телефону 1', () => {
        const result = run(
            'Создай контакт Григорий Иванов;' +
                'Добавь телефон 5556667787 для контакта Григорий Иванов;' +
                'Покажи имя для контактов, где есть 555;'
        )
        assert.deepEqual(result, ['Григорий Иванов'])
    })
    it('по телефону 2', () => {
        phoneBook.clear();
        const result2 = run(
            'Создай контакт Григорий Иванов;' +
            'Добавь телефон 5556667787 для контакта Григорий Иванов;' +
            'Покажи имя и почты для контактов, где есть 555;'
        )
        assert.deepEqual(result2, ['Григорий Иванов;'])
    })
    it('по телефону 3', () => {
        phoneBook.clear();
        const result3 = run(
            'Создай контакт Григорий Иванов;' +
            'Добавь телефон 5556667787 и телефон 5556667789 для контакта Григорий Иванов;' +
            'Покажи имя и телефоны и телефоны и имя для контактов, где есть 9;'
        )
        assert.deepEqual(result3, [
            'Григорий Иванов;+7 (555) 666-77-87,+7 (555) 666-77-89;+7 (555) 666-77-87,+7 (555) 666-77-89;Григорий Иванов',
        ])
    })
    it('по почте 1', () => {
        phoneBook.clear();
        const result3 = run(
            'Создай контакт Григорий Иванов;' +
            'Добавь телефон 5556667787 и почту leet1337@twotwoeight.com для контакта Григорий Иванов;' +
            'Покажи имя и почты и телефоны и имя для контактов, где есть @;'
        )
        assert.deepEqual(result3, [
            'Григорий Иванов;leet1337@twotwoeight.com;+7 (555) 666-77-87;Григорий Иванов',
        ])
    })
    it('по почте 2', () => {
        phoneBook.clear();
        const result3 = run(
            'Создай контакт Григорий Иванов;' +
            'Добавь телефон 5556667787 и почту leet1337@twotwoeight.com для контакта Григорий Иванов;' +
            'Покажи имя и почты и телефоны и имя для контактов, где есть leet;'
        )
        assert.deepEqual(result3, [
                'Григорий Иванов;leet1337@twotwoeight.com;+7 (555) 666-77-87;Григорий Иванов'
        ])
    })
    it('пустой запрос', () => {
        phoneBook.clear();
        const result = run(
            'Создай контакт Григорий Иванов;' + 'Покажи имя для контактов, где есть ;'
        )
        assert.deepEqual(result, [])
        assert.throws(
            () => run(
                'Создай контакт Григорий Иванов;' + 'Покажи имя для контактов, где есть;'
            ),
            {
                name: 'Error',
                message: 'SyntaxError: Unexpected token at 2:31',
            }
        )
    })
    it('пустой запрос после непустого', () => {
        assert.throws(
            () => run(
                'Создай контакт Григорий Иванов;' +
                'Покажи имя для контактов, где есть Григорий;' +
                'Покажи имя для контактов, где есть;'
            ),
            {
                name: 'Error',
                message: 'SyntaxError: Unexpected token at 3:31',
            }
        )
        const result = run(
            'Создай контакт Григорий Иванов;' +
                'Покажи имя для контактов, где есть Григорий;' +
                'Покажи имя для контактов, где есть ;'
        )
        assert.deepEqual(result, ['Григорий Иванов'])
        const result2 = run(
            'Создай контакт Григорий Иванов;' +
                'Покажи имя для контактов, где есть Григорий;' +
                'Покажи имя для контактов, где есть ;' +
                'Покажи имя для контактов, где есть Григорий;'
        )
        assert.deepEqual(result2, ['Григорий Иванов', 'Григорий Иванов'])
    })
})

describe('Удали', () => {
    it('syntaxError', () => {
        assert.throws(() => run('Удали телефон 55566677 для контакта Григорий;'), {
            name: 'Error',
            message: 'SyntaxError: Unexpected token at 1:15',
        })
    })
    it('контакт', () => {
        phoneBook.clear()
        const result = run(
            'Удали контакт Григорий;' +
                'Удали контакт Григорий;' +
                'Создай контакт Григорий;' +
                'Покажи имя для контактов, где есть ий;'
        )
        assert.deepEqual(result, ['Григорий'])
    })
    it('контакт с пробелом', () => {
        const result = run(
            'Создай контакт Григорий Иванов;' +
                'Удали контакт Григорий Иванов;' +
                'Удали контакт Григорий;' +
                'Покажи имя для контактов, где есть ий;'
        )
        assert.deepEqual(result, [])
    })
    it('удали + покажи', () => {
        const result = run(
            'Создай контакт Григорий;' +
                'Удали контакт Григорий;' +
                'Покажи имя для контактов, где есть ий;'
        )
        assert.deepEqual(result, [])
    })
    it('удали по телефону или почте', () => {
        const result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667787 для контакта Григорий;' +
                'Удали контакты, где есть 555;' +
                'Покажи имя для контактов, где есть ий;'
        )
        assert.deepEqual(result, [])
        const result2 = run(
            'Создай контакт Григорий;' +
                'Добавь почту aaa@gmail.com для контакта Григорий;' +
                'Удали контакты, где есть aaa;' +
                'Покажи имя для контактов, где есть ий;'
        )
        assert.deepEqual(result2, [])
    })
    it('пустой запрос', () => {
        const result = run(
            'Создай контакт Григорий;' +
                'Удали контакты, где есть ;' +
                'Покажи имя для контактов, где есть ий;'
        )
        assert.deepEqual(result, ['Григорий'])
        const result2 = run(
            'Создай контакт Григорий;' +
                'Удали контакты, где есть ;' +
                'Покажи имя для контактов, где есть ий;'
        )
        assert.deepEqual(result2, ['Григорий'])
    })
})

describe('Создай', () => {
    it('контакт', () => {
        phoneBook.clear()
        const result = run(
            'Создай контакт Григорий Григорьев;Покажи имя для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, ['Григорий Григорьев'])
    })
    it('контакт', () => {
        phoneBook.clear()
        const result = run('Создай контакт Григорий;Покажи имя для контактов, где есть Григорий;')
        assert.deepEqual(result, ['Григорий'])
    })
    it('контакт с пустым именем', () => {
        phoneBook.clear()
        const result = run('Создай контакт  ;Покажи имя для контактов, где есть  ;')
        assert.deepEqual(result, [' '])
    })

    it('контакты', () => {
        phoneBook.clear()
        const result = run(
            'Создай контакт Григорий;' +
                'Создай контакт Василий;' +
                'Создай контакт Иннокентий;' +
                'Покажи имя для контактов, где есть ий;'
        )
        assert.deepEqual(result, ['Григорий', 'Василий', 'Иннокентий'])
    })
    it('контакты', () => {
        phoneBook.clear()
        const result = run(
            'Создай контакт Григорий Иванов;' +
                'Создай контакт Василий;' +
                'Создай контакт Иннокентий;' +
                'Покажи имя для контактов, где есть Григорий Иванов;'
        )
        assert.deepEqual(result, ['Григорий Иванов'])
    })
})

describe('Добавь', () => {
    it('создай', () => {
        phoneBook.clear()
        const result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667787 для контакта Григорий;' +
                'Добавь телефон 5556667788 и почту grisha@example.com для контакта Григорий;' +
                'Покажи имя и телефоны и почты для контактов, где есть ий;'
        )
        assert.deepEqual(result, [
            'Григорий;+7 (555) 666-77-87,+7 (555) 666-77-88;grisha@example.com',
        ])
    })
    it('с пробелом', () => {
        phoneBook.clear()
        const result = run(
            'Создай контакт Григорий Иванов;' +
                'Добавь телефон 5556667787 для контакта Григорий Иванов;' +
                'Добавь телефон 5556667788 и почту grisha@example.com для контакта Григорий Иванов;' +
                'Покажи имя и телефоны и почты для контактов, где есть ий;'
        )
        assert.deepEqual(result, [
            'Григорий Иванов;+7 (555) 666-77-87,+7 (555) 666-77-88;grisha@example.com',
        ])
    })
    it('создай + удали', () => {
        phoneBook.clear()
        const result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667788 для контакта Григорий;' +
                'Удали телефон 5556667788 для контакта Григорий;' +
                'Покажи имя и телефоны для контактов, где есть ий;'
        )
        assert.deepEqual(result, ['Григорий;'])
    })
})

describe('Examples', () => {
    let result = []

    it('создай контакт', () => {
        result = run('Создай контакт Григорий;')
        assert.deepEqual(result, [])

        assert.throws(() => run('Создай контакт Григорий;;'), {
            name: 'Error',
            message: 'SyntaxError: Unexpected token at 2:1',
        })

        result = run('Создай контакт  ;')
        assert.deepEqual(result, [])

        result = run('Создай контакт Григорий;Покажи имя для контактов, где есть Григорий;')
        assert.deepEqual(result, ['Григорий'])

        result = run(
            'Создай контакт Григорий;Создай контакт Григорий;Покажи имя для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, ['Григорий'])

        result = run(
            'Создай контакт Григорий;Создай контакт Григорий;Создай контакт Григорий;Создай контакт Григорий;Покажи имя для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, ['Григорий'])
    })

    it('удали контакт', () => {
        result = run(
            'Создай контакт Григорий;Удали контакт Григорий;Покажи имя для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, [])

        result = run('Удали контакт Григорий;Покажи имя для контактов, где есть Григорий;')
        assert.deepEqual(result, [])

        result = run(
            'Создай контакт Иван;Удали контакт Григорий;Покажи имя для контактов, где есть Иван;'
        )
        assert.deepEqual(result, ['Иван'])

        result = run('Удали контакт    ;')
        assert.deepEqual(result, [])
    })

    it('добавь', () => {
        result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667788 и телефон 5556667787 и почту grisha@example.com для контакта Григорий;' +
                'Покажи телефоны и почты для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, ['+7 (555) 666-77-88,+7 (555) 666-77-87;grisha@example.com'])

        assert.throws(
            () =>
                run(
                    'Создай контакт Григорий;' +
                        'Добавь телефон 5556667788 и телефон +5556667787 и почту grisha@example.com для контакта Григорий;'
                ),
            {
                name: 'Error',
                message: 'SyntaxError: Unexpected token at 2:37',
            }
        )

        assert.throws(
            () =>
                run(
                    'Создай контакт Григорий;' +
                        'Добавь телефон 5556667788 и телефон 5556667787 и почту grisha @example.com для контакта Григорий;'
                ),
            {
                name: 'Error',
                message: 'SyntaxError: Unexpected token at 2:63',
            }
        )

        assert.throws(
            () =>
                run(
                    'Создай контакт Григорий;' +
                        'Добавь телефон 5556667788 и телефон 5556667787 и почту   для контакта Григорий;'
                ),
            {
                name: 'Error',
                message: 'SyntaxError: Unexpected token at 2:56',
            }
        )
        phoneBook.clear()
        result = run(
            'Добавь телефон 5556667788 и телефон 5556667787 и почту grisha@example.com для контакта Григорий;' +
                'Покажи телефоны и почты для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, [])

        result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667788 и телефон 5556667787 и почту grisha@example.com для контакта Григорий;' +
                'Добавь телефон 5556667789 и телефон 5556667787 и почту grisha@example.com для контакта Григорий;' +
                'Добавь телефон 5556667789 и телефон 5556667780 и почту grisha@example.com для контакта Григорий;' +
                'Покажи телефоны и почты для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, [
            '+7 (555) 666-77-88,+7 (555) 666-77-87,+7 (555) 666-77-89,+7 (555) 666-77-80;grisha@example.com',
        ])

        result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667788 и телефон 5556667787 и почту grisha@example.com для контакта Григорий;' +
                'Добавь телефон 5556667789 и телефон 5556667787 и почту grisha2@example.com и почту grisha2@example.com и почту grisha@example.com для контакта Григорий;' +
                'Добавь телефон 5556667789 и телефон 5556667780 и почту grisha@example.com для контакта Григорий;' +
                'Покажи телефоны и почты для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, [
            '+7 (555) 666-77-88,+7 (555) 666-77-87,+7 (555) 666-77-89,+7 (555) 666-77-80;grisha@example.com,grisha2@example.com',
        ])

        result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667788 и телефон 5556667787 и почту grisha@example.com для контакта Григорий;' +
                'Добавь телефон 5556667789 и телефон 5556667787 и почту grisha2@example.com и почту grisha2@example.com и почту grisha@example.com и почту grisha3@example.com для контакта Григорий;' +
                'Добавь телефон 5556667789 и телефон 5556667780 и почту grisha@example.com для контакта Григорий;' +
                'Покажи телефоны и почты для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, [
            '+7 (555) 666-77-88,+7 (555) 666-77-87,+7 (555) 666-77-89,+7 (555) 666-77-80;grisha@example.com,grisha2@example.com,grisha3@example.com',
        ])
        phoneBook.clear()
        result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667788 и почту grisha@example.com и телефон 5556667787 для контакта Григорий;' +
                'Покажи телефоны и почты для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, ['+7 (555) 666-77-88,+7 (555) 666-77-87;grisha@example.com'])
    })

    it('удали с параметрами', () => {
        phoneBook.clear()
        result = run(
            'Удали телефон 5556667788 для контакта Григорий;' +
                'Покажи телефоны и почты для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, [])

        result = run(
            'Создай контакт Григорий;' +
                'Удали телефон 5556667788 для контакта Григорий;' +
                'Покажи телефоны и почты для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, [';'])

        result = run(
            'Создай контакт Григорий;' +
                'Удали телефон 5556667788 для контакта Григорий;' +
                'Покажи телефоны и почты и почты и телефоны и почты для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, [';;;;'])

        result = run(
            'Создай контакт Григорий;' +
                'Удали телефон 5556667788 для контакта Григорий;' +
                'Покажи телефоны для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, [''])

        result = run(
            'Создай контакт Григорий;' +
                'Удали телефон 5556667788 для контакта Григорий;' +
                'Покажи телефоны и имя для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, [';Григорий'])

        result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667788 и почту grisha@example.com и телефон 5556667787 для контакта Григорий;' +
                'Удали телефон 5556667788 для контакта Григорий;' +
                'Покажи телефоны и имя для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, ['+7 (555) 666-77-87;Григорий'])

        result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667788 и почту grisha@example.com и телефон 5556667787 для контакта Григорий;' +
                'Удали телефон 5556667788 для контакта Григорий;' +
                'Покажи телефоны и имя для контактов, где есть ;'
        )
        assert.deepEqual(result, [])

        result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667788 и почту grisha@example.com и телефон 5556667787 для контакта Григорий;' +
                'Удали телефон 5556667788 для контакта Григорий;' +
                'Покажи телефоны и имя для контактов, где есть ;' +
                'Покажи телефоны и имя для контактов, где есть Григорий;' +
                'Покажи телефоны и имя для контактов, где есть Гг    а    а   ;'
        )
        assert.deepEqual(result, ['+7 (555) 666-77-87;Григорий'])
    })
    it('удали где есть', () => {
        result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667788 и почту grisha@example.com и телефон 5556667787 для контакта Григорий;' +
                'Удали контакты, где есть Гр;' +
                'Покажи имя для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, [])

        result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667788 и почту grisha@example.com и телефон 5556667787 для контакта Григорий;' +
                'Удали контакты, где есть 5;' +
                'Покажи имя для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, [])

        result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667788 и почту grisha@example.com и телефон 5556667787 для контакта Григорий;' +
                'Удали контакты, где есть .;' +
                'Покажи имя для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, [])

        result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667788 и почту grisha@example.com и телефон 5556667787 для контакта Григорий;' +
                'Удали контакты, где есть a@;' +
                'Покажи имя для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, [])

        result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667788 и почту grisha@example.com и телефон 5556667787 для контакта Григорий;' +
                'Удали контакты, где есть 55566677888;' +
                'Покажи имя для контактов, где есть 55;'
        )
        assert.deepEqual(result, ['Григорий'])

        result = run(
            'Создай контакт Григорий;' +
                'Добавь телефон 5556667788 и почту grisha@example.com и телефон 5556667787 для контакта Григорий;' +
                'Удали контакты, где есть ;' +
                'Покажи имя для контактов, где есть Григорий;'
        )
        assert.deepEqual(result, ['Григорий'])
    })
    it('покажи с параметрами', () => {
        result = run('Покажи имя для контактов, где есть ;')
        assert.deepEqual(result, [])

        result = run('Создай контакт Григорий;' + 'Покажи имя для контактов, где есть ;')
        assert.deepEqual(result, [])

        result = run('Создай контакт Григорий;' + 'Покажи имя для контактов, где есть Григорийй;')
        assert.deepEqual(result, [])

        result = run('Создай контакт Григорий;' + 'Покажи имя для контактов, где есть григорий;')
        assert.deepEqual(result, [])
    })
})

describe('Complex tests', () => {
    let result = []
    it('test1', () => {
        result = run(
            'Создай контакт Аркадий Аркадьевич FFF;' +
                'Создай контакт Аркадий Аркадьевич FF;' +
                'Создай контакт Аркадий Аркадьевич F;' +
                // 1
                'Покажи имя и имя и почты для контактов, где есть ;' +
                // 2
                'Покажи имя и имя и почты для контактов, где есть FF;' +
                // 3
                'Покажи имя для контактов, где есть FFF;' +
                // 4
                'Покажи телефоны для контактов, где есть Арк;' +
                'Добавь телефон 5556667788 и телефон 5556667788 для контакта Григорий;' +
                'Добавь телефон 5556667788 и телефон 5556667788 для контакта Аркадий Аркадьевич FFF;' +
                'Добавь телефон 5556667788 и телефон 5556667788 для контакта Аркадий Аркадьевич;' +
                // 5
                'Покажи телефоны и телефоны и имя для контактов, где есть Арк;'
        )
        assert.deepEqual(result, [
                'Аркадий Аркадьевич FFF;Аркадий Аркадьевич FFF;',
                'Аркадий Аркадьевич FF;Аркадий Аркадьевич FF;',
                'Аркадий Аркадьевич FFF',
                '',
                '',
                '',
                '+7 (555) 666-77-88;+7 (555) 666-77-88;Аркадий Аркадьевич FFF',
                ';;Аркадий Аркадьевич FF',
                ';;Аркадий Аркадьевич F'
            ]
        )
    })
})
